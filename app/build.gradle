import com.android.build.api.transform.DirectoryInput
import com.android.build.api.transform.Format
import com.android.build.api.transform.JarInput
import com.android.build.api.transform.QualifiedContent
import com.android.build.api.transform.Transform
import com.android.build.api.transform.TransformException
import com.android.build.api.transform.TransformInput
import com.android.build.api.transform.TransformInvocation
import com.android.build.gradle.AppExtension
import com.google.common.collect.ImmutableSet
import org.apache.commons.codec.digest.DigestUtils
import org.apache.commons.io.FileUtils

import java.util.jar.JarEntry
import java.util.jar.JarFile

apply plugin: 'com.android.application'
apply from: rootProject.file("view_opt.gradle")


apply plugin: 'hufeiyang'

apply plugin: 'McImage'
McImageConfig {
    isCheckSize true //是否检测图片大小，默认为true
    optimizeType "ConvertWebp" //优化类型，可选"ConvertWebp"，"Compress"，转换为webp或原图压缩，默认Compress，使用ConvertWep需要min sdk >= 18.但是压缩效果更好
    maxSize 1*1024*1024 //大图片阈值，default 1MB
    enableWhenDebug true //debug下是否可用，default true
    isCheckPixels true // 是否检测大像素图片，default true
    maxWidth 1000 //default 1000 如果开启图片宽高检查，默认的最大宽度
    maxHeight 1000 //default 1000 如果开启图片宽高检查，默认的最大高度
    whiteList = [ //默认为空，如果添加，对图片不进行任何处理
                  "icon_launcher.png"
    ]
    mctoolsDir "$rootDir"
    isSupportAlphaWebp false  //是否支持带有透明度的webp，default false,带有透明图的图片会进行压缩
    multiThread true  //是否开启多线程处理图片，default true
    bigImageWhiteList = [
            "expanablepic.jpg",
            "qqq.png"
    ] //默认为空，如果添加，大图检测将跳过这些图片
}

android {

    //compileSdkVersion 告诉 Gradle 用哪个 Android SDK 版本编译你的应用。使用任何新添加的 API 就需要使用对应 Level 的 Android SDK。
    //推荐总是使用最新的 SDK 进行编译
//    compileSdkVersion this.rootProject.mCompileSdkVersion //这个也可以
//    compileSdkVersion mCompileSdkVersion
    compileSdkVersion rootProject.ext.android.compileSdkVerison //使用rootProject引入的扩展属性

    //默认配置，就是每个变体共用的配置，当然也可以单独在变体中配置
    defaultConfig {
        applicationId "com.hfy.androidlearning"
        //minSdkVersion 则是应用可以运行的最低要求。minSdkVersion 是 Google Play 商店用来判断用户设备是否可以安装某个应用的标志之一。
        minSdkVersion 21
        //targetSdkVersion是Android提供向前兼容的主要依据，表明该application已经兼容从minSdkVersion至tartgetSdkVersion之间所有api的变化。在targetSdkVersion更新之前系统不会应用最新的行为变化
        //比如，targetSDKVersion < 23 & API(手机系统) >= 6.0 ：安装时默认获得权限，但是用户可以在安装App完成后动态取消授权（ 取消时手机会弹出提醒，告诉用户这个是为旧版手机打造的应用，让用户谨慎操作 ）。
        targetSdkVersion 30
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        ndk{
            abiFilters "armeabi-v7a","arm64-v8a","x86"
        }
    }

    //理想上，在稳定状态下三者的关系应该更像这样：minSdkVersion (lowest possible) <= targetSdkVersion == compileSdkVersion (latest SDK)
    //用较低的 minSdkVersion 来覆盖最大的人群，用最新的 SDK 设置 target 和 compile 来获得最好的外观和行为。

    aaptOptions {

        File publicTxtFile = project.rootProject.file('public.txt')
//        if (publicTxtFile.exists()) {
//            project.logger.error "${publicTxtFile} exists, apply it."
//            project.logger.error "${publicTxtFile.absolutePath} exists, apply it."
//            aaptOptions.additionalParameters("--stable-ids", "${publicTxtFile.absolutePath}")
//        }
        additionalParameters '--allow-reserved-package-id', '--package-id', '0x8f', "--stable-ids", "${publicTxtFile.absolutePath}"
    }

    //编译类型
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //设置风味的维度：应用市场、是否免费
    flavorDimensions "market","ifPay"

    //产品风味
    productFlavors{
        xiaomi{
            dimension "market"  //应用市场维度
//            applicationId = "_xiaomi"
        }

        huawei{
            dimension "market"
//            applicationId = "_huawei"
        }

        free{
            dimension "ifPay" //是否免费维度
//            applicationId = "_free"
        }

        pay{
            dimension "ifPay"
//            applicationId = "_needPay"
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    dataBinding {
        enabled = true
    }

    viewBinding {
        enabled = true
    }
    buildToolsVersion '30.0.3'

    sourceSets {
        main{
            jniLibs.srcDirs = ['libs'] //修改so库的存放位置
            res.srcDirs = ['src/main/res',
                           'src/main/res-ad',
                           'src/main/res-player' ] //修改资源存放位置
        }
    }

    configurations.all {
        resolutionStrategy {
            force 'androidx.core:core-ktx:1.6.0'
        }
    }
}

//为应用程序添加依赖
dependencies {DependencyHandler dependencyHandler ->
    implementation fileTree(include: ['*.jar'], dir: 'libs')  //依赖本地文件树（文件夹），本地jar依赖
//    implementation file('') //依赖本地单个依赖
//    implementation files('','')//依赖本地多个文件
    implementation project(path: ':viewoptapi') //依赖本地module
    implementation 'androidx.appcompat:appcompat:1.2.0'      //依赖远程arr依赖

//    compileOnly '' //编译时依赖

    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'
//    implementation 'com.google.firebase:firebase-core:16.0.7'
//    implementation 'com.google.firebase:firebase-messaging:17.3.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation project(path: ':secondfloor')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    //support:design
    implementation 'com.google.android.material:material:1.0.0'

    implementation ('com.android.support:multidex:1.0.3'){
        //如果有依赖冲突，使用exclude配出依赖
//        exclude group 'com.hfy.group1'  module 'hehe' //排除依赖：某个组下面的某个module
//        transitive false //关闭传递依赖 A->B->C，A不依赖C
    }

    //Jetpack相关
    def lifecycle_version = "2.2.0"
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    // 只有Lifecycles (不带 ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    // lifecycle注解处理器
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
//    // 替换 - 如果使用Java8,就用这个替换上面的lifecycle-compiler
//    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // 可选 - ProcessLifecycleOwner给整个 app进程 提供一个lifecycle
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"

    //glide （貌似也能加载SVG）
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    //图片变换（配合Glide）
    implementation 'jp.wasabeef:glide-transformations:4.1.0'
    //Glide加载使用okhttp3
    implementation 'com.github.bumptech.glide:okhttp3-integration:4.11.0'
    implementation 'com.github.sahasbhop:apng-view:1.3'


    //butterknife
    implementation 'com.jakewharton:butterknife:10.2.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.0'
    //dagger2
    implementation 'com.google.dagger:dagger:2.24'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.19'
    //gson
    implementation 'com.google.code.gson:gson:2.8.5'
    //rxjava2
    implementation 'io.reactivex.rxjava2:rxjava:2.2.9'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.6.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'
    //eventBus
    implementation 'org.greenrobot:eventbus:3.1.1'
    //disklrucache
    implementation 'com.jakewharton:disklrucache:2.0.2'
    //util大全
    implementation 'com.blankj:utilcodex:1.28.3'

    //BRVAH
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.2'

    //x2c
    annotationProcessor 'com.zhangyue.we:x2c-apt:1.1.2'
    implementation 'com.zhangyue.we:x2c-lib:1.0.6'


    //我的简单图片加载库
    implementation project(path: ':simpleimageloader')    //本地工程依赖
    implementation 'com.squareup.okhttp3:okhttp:3.14.7'
    implementation 'com.squareup.okio:okio:1.17.5'


    //titlebar
//    implementation 'com.wuhenzhizao:titlebar:1.1.4'

    // 启动器
    implementation 'com.github.zeshaoaaa:LaunchStarter:0.0.1'

    //自定义 注解处理器（注解处理器 只在编译处理期间需要用到，编译处理完后就没有实际作用了。所以使用annotationProcessor（允许只将编译时注释处理器配置为依赖项，而不在最终APK或库中包括工件）
    annotationProcessor project(path: ':test_annotation_compiler')
    //依赖test_annotations声明库（一般只需要依赖一个库api库 不需要直接依赖annotations声明库，api库会透传依赖的annotations声明库）
    implementation project(path: ':test_annotations')

    //三方登录
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:6.7.9'
    implementation 'com.tencent.tauth:qqopensdk:3.52.0'
    implementation 'com.qq.e.union:union:4.400.1270' // 普通版本

    //布局优化-去反射
    annotationProcessor project(path: ':ViewOptProcessor')
    implementation project(path: ':ViewOptAnnotations')
    implementation project(path: ':viewoptapi')

    //依赖差分包处理模块
    implementation project(path: ':hfy_bsdiff')

    // PictureSelector 基础 (必须)
    implementation 'io.github.lucksiege:pictureselector:v3.11.1'
}


apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//compileKotlin {
//    kotlinOptions {
//        languageVersion = "1.4"
//    }
//}

//gradle中使用外部命令：即使用linux命令
//场景：gradle命令不满足了。例如 涉及到本机目录
task('apkcopy'){  //手动执行：./gradlew apkcopy
    doLast { //doLast后闭包的内容 是执行在 执行阶段，而不是配置阶段
        //生成的apk移动到本机目录
        def sourcePath = this.buildDir.path + '/outputs/apk'
        def destinationPath = '/Users/bytedance/Downloads'
        def command = "mv -f ${sourcePath} ${destinationPath}"
//        def command = "cp -r ${sourcePath} ${destinationPath}" //-r 递归复制，用于复制目录

        //以下是固定写法,可修改command改变功能
        exec {
            try {
                executable 'bash' //外部命令 executable都是bash
                args '-c', command
                println 'the command exec success'
            }catch(GradleException e){
                println 'the command exec failed'
            }
        }
    }
}

/**
 * Task
 * 1. gradle中只有task可以在执行阶段执行
 * 2. 且task必须使用deFirst、doLast才能执行在执行阶段
 * 3. gradle的重点就是各种task的执行阶段的逻辑
 */
//1. 直接通过task函数创建task;
//实际是调用的project的task方法，task('hellotask'){ }，小括号省略：
// 对task的配置；group ：分组，dependsOn：依赖的task等
task hellotask(group: 'cusGroup',description: 'hellotask in cusGroup'){
    println 'i am a hello task' //注意这句也是配置，是在配置阶段执行

    //只有这两个do 是在执行阶段
    doFirst {
        println 'hellotask doFirst 1， group:'+group
    }
    doFirst {
        println 'hellotask doFirst 2'
    }
    doLast {
        println 'hellotask doLast 1'
    }
    doLast {
        println 'hellotask doLast 2'
    }
}

hellotask.doFirst {}

//2. 通过 TaskContainer 函数创建task
tasks.create('hellotask2'){

    //配置
    setGroup('cusGroup')
    setDescription('hellotask2 in cusGroup')
//    setDependsOn(...)
//    setFinalizedBy(...)

    println 'i am a hello task2'
}

//统计build时长: 对 系统task 进行doFirst、doLast操作，记录时间
def buildStartTime,buildEndTime
//afterEvaluate保证要找的Task一定能找到！
this.afterEvaluate {Project project ->
    //找到Task-preBuild，然后doFirst
    project.tasks.findByName("preBuild").doFirst {Task task->
        buildStartTime = System.currentTimeMillis()
        println "preBuild name：${task.name} is start，time：${buildStartTime}"
    }

    project.tasks.findByName("assembleDebug").doLast {Task task->
        buildEndTime = System.currentTimeMillis()
        println "build name ${task.name} is ended, time cost:${buildEndTime - buildStartTime}"
    }
}
//preBuild name：preBuild is start，time：1661775855486
//build name assembleDebug is ended, time cost:1445


//没有用
this.beforeEvaluate {
    println "app beforeEvaluate!!!"
}

this.afterEvaluate {
    println "app afterEvaluate!!!"
}

//copy apk
copy {
    from file('build/outputs/apk/')
    into rootProject.getBuildDir().absolutePath+'/apk'
}

/**
 * task 依赖
 */
task taskX {
    println "configuration in taskX"
    doLast {
        println "do last in taskX"
    }
}

task taskY {
    println "configuration in taskY"
    doLast {
        println "do last in taskY"
    }
}

//taskX,taskY 要放在taskZ前面，否则会不认识！！！
//1.使用属性dependsOn添加依赖
task taskZ (dependsOn:[taskX,taskY] ){
    println "configuration in taskZ"
    doLast {
        println "do last in taskZ"
    }
}

task lib1{
    println "configuration in lib1"
    doLast {
        println "do last in lib1"
    }
}

task lib2{
    println "configuration in lib2"
    doLast {
        println "do last in lib2"
    }
}

task taskW{
    println "configuration in taskW 1"
    println "tasks size: ${tasks.size()}, tasks  :" + tasks.toListString()

    //2.使用方法添加依赖
//    dependsOn lib1
    //也可以动态添加依赖
    def setOfTasks = this.tasks.findAll {task ->
        //这里注意一定要用task.name 而不是name
        return task.name.contains('lib')
    }
    println "setOfTasks  :" + setOfTasks.toListString()
    dependsOn setOfTasks

    doLast {
        println "do last in taskW"
    }
    println "configuration in taskW 2"
}

task handleReleaseFile {
    def srcFile = file('release.xml') //file()是处理 当前project中的文件
    def outDir = mkdir("build/outputs/generated/releases") //创建输出目录
    doLast {
        println "------ handleReleaseFile start ------"
        def xmlSlurper = new XmlSlurper()
        def releases = xmlSlurper.parse(srcFile)
        releases.release.each{ releaseNode->
            def versionCode = releaseNode.versionCode.text()
            def versionName = releaseNode.versionName.text()
            def versionInfo = releaseNode.versionInfo.text()
            //创建文件写入信息
            def file = new File(outDir, "release-${versionName}" + ".txt")
            file.withWriter { writer ->
                writer.write("versionCode:${versionCode}, versionName:${versionName}, versionInfo:${versionInfo}")
            }
        }
        println "------ handleReleaseFile end ------"
    }
}

//依赖上面的task，读取上面写入的文件信息
task testReleasesFile(dependsOn: handleReleaseFile) {
    doLast{
        def fileTree = fileTree("build/outputs/generated/releases")
        //visit 会深度遍历文件树
        fileTree.visit { FileVisitDetails fileVisitDetails->
            fileVisitDetails.file.withReader {reader->
                println "the versioin file info is: ${reader.text}"
            }
        }
    }
}

this.afterEvaluate {
    this.android.applicationVariants.all{ variant ->
        def name = variant.name
        def baseName = variant.baseName
        def buildType = variant.buildType
        def versionCode = variant.versionCode
        def versionName = variant.versionName
        def flavorName = variant.flavorName
        def output = variant.outputs.first()

        //配置apk文件
        def apkName = "hfy_${baseName}_${versionName}.apk"
        output.outputFileName = apkName

        println "name:${name}, baseName:${baseName}"

        //找到关注的系统task，这里的checkManifest是在preBuild之后执行
        def checkManifestTask = variant.checkManifest
        println checkManifestTask.name //checkHuaweiFreeReleaseManifest

        //doFirst
        checkManifestTask.doFirst{
            //doSth
        }
        //doLast
        checkManifestTask.doLast{
            //doSth
        }
    }
}
//name:xiaomiPayDebug, baseName:xiaomi-pay-debug
//name:xiaomiFreeDebug, baseName:xiaomi-free-debug
//name:huaweiPayDebug, baseName:huawei-pay-debug
//name:huaweiFreeDebug, baseName:huawei-free-debug
//name:xiaomiPayRelease, baseName:xiaomi-pay-release
//name:xiaomiFreeRelease, baseName:xiaomi-free-release
//name:huaweiPayRelease, baseName:huawei-pay-release
//name:huaweiFreeRelease, baseName:huawei-free-release

//自定义继承Task：type是一个关键字，用来引入一个存在的Task，例如 Delete、Jar

//删除dynamic.jar包任务
task clearJar(type: Delete) {
    delete 'libs/dynamic.jar'
}

//从指定文件夹生成jar，输出目录是app/build/libs
task makeJar(type:org.gradle.api.tasks.bundling.Jar) {
    //指定生成的jar名
    baseName 'dynamic'
    //从哪里打包class文件
    from('build/intermediates/javac/huaweiFreeDebug/classes/com/hfy/demo01/plugin/')
    //打包到jar后的目录结构
    into('com/hfy/demo01/plugin')
    //去掉不需要打包的目录和文件
    exclude('test/', 'IDex.class', 'BuildConfig.class', 'R.class', 'FileUtils.class')
    //去掉R$开头的文件
    exclude{ it.name.startsWith('R$');}
}
//makeJar.dependsOn(clearJar, build)
makeJar.dependsOn(clearJar)


class TestDomainBean{
    //这是一个必须要有的属性并且申明后不要修改
    public String name

    public String msg

    public TestDomainBean(String name){
        this.name = name
    }

    String getName() {
        return name
    }

    void setName(String name) {
        this.name = name
    }

    String getMsg() {
        return msg
    }

    void setMsg(String msg) {
        this.msg = msg
    }


    @Override
    public String toString() {
        return "TestDomainBean{" +
                "name='" + name + '\'' +
                ", msg='" + msg + '\'' +
                '}';
    }
}

project.extensions.add("TestDomainConfig", project.container(TestDomainBean))

TestDomainConfig{
    hufeiyang{
        msg = "hufeiyang-msg"
    }

    zhangdie{
        msg = "zhangdie-msg"
    }
}

project.afterEvaluate {
    def testDomainConfigs = (NamedDomainObjectContainer<TestDomainBean>)project.getExtensions().findByName("TestDomainConfig")
    testDomainConfigs.each {
        println "获取到TestDomainBean：${it.toString()}"
    }
}

//project.gradle.startParameter.getTaskNames().each {
//    // 命令行输入 ./gradlew clean assembleRelease -s
//    // 会输出 clean assembleRelease
//    // 可以利用这个信息确定构建模式
//}
afterEvaluate{
    project.gradle.startParameter.taskNames.each {
        println "startParameter.taskName:$it"
    }

    def appExtension = project.extensions.findByType(AppExtension.class)
    def variants = appExtension.applicationVariants
    variants.all{
        println "variant:${it.name}"
    }

    def localProperties = new Properties()
    localProperties.load(project.rootProject.file("local.properties").newDataInputStream())
    def typeProperties = localProperties.getProperty("TYPE")
    println "typeProperties:$typeProperties"
}

//注册Transform
def appExtension = project.extensions.findByType(AppExtension.class)
appExtension.registerTransform(new MyTransform(project))

class MyTransform extends Transform {

    Project project

    MyTransform(Project project) {
        this.project = project
    }

    @Override
    String getName() {
        return "MyTransform"
    }

    @Override
    Set<com.android.build.api.transform.QualifiedContent.ContentType> getInputTypes() {
        return ImmutableSet.of(QualifiedContent.DefaultContentType.CLASSES)

    }

    @Override
    Set<? super QualifiedContent.Scope> getScopes() {
        return ImmutableSet.of(QualifiedContent.Scope.PROJECT, QualifiedContent.Scope.SUB_PROJECTS,
                QualifiedContent.Scope.EXTERNAL_LIBRARIES)
    }

    @Override
    boolean isIncremental() {
        return true
    }

    @Override
    void transform(TransformInvocation transformInvocation) throws TransformException, InterruptedException, IOException {
        super.transform(transformInvocation)

        println " MyTransform start to transform-------------->>>>>>>"

        transformInvocation.getInputs().each { TransformInput input ->

            input.directoryInputs.each { DirectoryInput directoryInput ->

                //遍历class文件
                directoryInput.file.eachFileRecurse(groovy.io.FileType.FILES) { File file ->
                    def filePath = file.absolutePath
                    println("file path:$filePath")

                    //通过class文件路径获取类全名
                    //有两类class文件，一类是build/intermediates/javac/huaweiFreeDebug/classes，一类是build/tmp/kotlin-classes/huaweiFreeDebug
                    //    /Users/bytedance/AndroidStudioProjects/AndroidLeaning/app/build/intermediates/javac/huaweiFreeDebug/classes/com/bumptech/glide/GeneratedRequestManagerFactory.class
                    //    /Users/bytedance/AndroidStudioProjects/AndroidLeaning/app/build/tmp/kotlin-classes/huaweiFreeDebug/com/hfy/demo01/longimage/LongImageTestActivity.class
                    def variantName = transformInvocation.context.variantName
                    def className = filePath.split(variantName)[1].substring(1)
                    if (filePath.contains("classes")) {
                        className = filePath.split("classes")[1].substring(1)
                    }

                    //todo 识别目标class
                    if(className.contains("xxx")){
                        //todo 逻辑处理
                    }else{

                    }

                }

                def dest = transformInvocation.getOutputProvider().getContentLocation(directoryInput.name, directoryInput.contentTypes, directoryInput.scopes, Format.DIRECTORY)
                FileUtils.copyDirectory(directoryInput.file, dest)
            }

            input.jarInputs.each { JarInput jarInput ->

                def jarName = jarInput.name
                def md5 = DigestUtils.md5Hex(jarInput.file.getAbsolutePath())
                if (jarName.endsWith(".jar")) {
                    jarName = jarName.substring(0, jarName.length() - 4)
                }

                def dest = transformInvocation.getOutputProvider().getContentLocation(jarName + md5, jarInput.contentTypes, jarInput.scopes, Format.JAR)

                println("jarInput = ${jarInput.file.absolutePath}")

                def file = new JarFile(jarInput.file)
                Enumeration<JarEntry> enumeration = file.entries()
                //遍历jar中的class
                while (enumeration.hasMoreElements()) {
                    JarEntry jarEntry = enumeration.nextElement()
                    String entryName = jarEntry.getName()

                    //todo 识别目标class文件并处理
                    if (entryName == "xxx") {
                        //
                    } else {
                        //
                    }

                }

                FileUtils.copyFile(jarInput.file, dest)
            }
        }


        println "MyTransform transform finish----------------<<<<<<<\n"

    }

}
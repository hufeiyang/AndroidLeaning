apply plugin: 'com.android.application'
apply from: rootProject.file("view_opt.gradle")

android {

    //compileSdkVersion 告诉 Gradle 用哪个 Android SDK 版本编译你的应用。使用任何新添加的 API 就需要使用对应 Level 的 Android SDK。
    //推荐总是使用最新的 SDK 进行编译
    compileSdkVersion 29

    defaultConfig {
        applicationId "com.hfy.androidlearning"
        //minSdkVersion 则是应用可以运行的最低要求。minSdkVersion 是 Google Play 商店用来判断用户设备是否可以安装某个应用的标志之一。
        minSdkVersion 16
        //targetSdkVersion是Android提供向前兼容的主要依据，表明该application已经兼容从minSdkVersion至tartgetSdkVersion之间所有api的变化。在targetSdkVersion更新之前系统不会应用最新的行为变化
        //比如，targetSDKVersion < 23 & API(手机系统) >= 6.0 ：安装时默认获得权限，但是用户可以在安装App完成后动态取消授权（ 取消时手机会弹出提醒，告诉用户这个是为旧版手机打造的应用，让用户谨慎操作 ）。
        targetSdkVersion 30
        versionCode 107
        versionName "1.07"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
    }

    //理想上，在稳定状态下三者的关系应该更像这样：minSdkVersion (lowest possible) <= targetSdkVersion == compileSdkVersion (latest SDK)
    //用较低的 minSdkVersion 来覆盖最大的人群，用最新的 SDK 设置 target 和 compile 来获得最好的外观和行为。


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    dataBinding {
        enabled = true
    }

    viewBinding {
        enabled = true
    }
    buildToolsVersion '30.0.3'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'
//    implementation 'com.google.firebase:firebase-core:16.0.7'
//    implementation 'com.google.firebase:firebase-messaging:17.3.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    //support:design
    implementation 'com.google.android.material:material:1.0.0'

    implementation 'com.android.support:multidex:1.0.3'

    //Jetpack相关
    def lifecycle_version = "2.2.0"
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    // 只有Lifecycles (不带 ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    // lifecycle注解处理器
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
//    // 替换 - 如果使用Java8,就用这个替换上面的lifecycle-compiler
//    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // 可选 - ProcessLifecycleOwner给整个 app进程 提供一个lifecycle
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"

    //glide （貌似也能加载SVG）
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    //图片变换（配合Glide）
    implementation 'jp.wasabeef:glide-transformations:4.1.0'
    //Glide加载使用okhttp3
    implementation 'com.github.bumptech.glide:okhttp3-integration:4.11.0'
    implementation 'com.github.sahasbhop:apng-view:1.3'


    //butterknife
    implementation 'com.jakewharton:butterknife:10.2.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.0'
    //dagger2
    implementation 'com.google.dagger:dagger:2.24'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.19'
    //gson
    implementation 'com.google.code.gson:gson:2.8.5'
    //rxjava2
    implementation 'io.reactivex.rxjava2:rxjava:2.2.9'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.6.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'
    //eventBus
    implementation 'org.greenrobot:eventbus:3.1.1'
    //disklrucache
    implementation 'com.jakewharton:disklrucache:2.0.2'
    //util大全
    implementation 'com.blankj:utilcodex:1.28.3'

    //BRVAH
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.2'

    //x2c
    annotationProcessor 'com.zhangyue.we:x2c-apt:1.1.2'
    implementation 'com.zhangyue.we:x2c-lib:1.0.6'


    //我的简单图片加载库
    implementation project(path: ':simpleimageloader')
    implementation 'com.squareup.okhttp3:okhttp:3.14.7'
    implementation 'com.squareup.okio:okio:1.17.5'


    //titlebar
//    implementation 'com.wuhenzhizao:titlebar:1.1.4'

    // 启动器
    implementation 'com.github.zeshaoaaa:LaunchStarter:0.0.1'

    //自定义 注解处理器（注解处理器 只在编译处理期间需要用到，编译处理完后就没有实际作用了。所以使用annotationProcessor（允许只将编译时注释处理器配置为依赖项，而不在最终APK或库中包括工件）
    annotationProcessor project(path: ':test_annotation_compiler')
    //依赖test_annotations声明库（一般只需要依赖一个库api库 不需要直接依赖annotations声明库，api库会透传依赖的annotations声明库）
    implementation project(path: ':test_annotations')

    //三方登录
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:6.7.9'
    implementation 'com.tencent.tauth:qqopensdk:3.52.0'
    implementation 'com.qq.e.union:union:4.400.1270' // 普通版本

    //布局优化-去反射
    annotationProcessor project(path: ':ViewOptProcessor')
    implementation project(path: ':ViewOptAnnotations')
    implementation project(path: ':viewoptapi')

}


apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//compileKotlin {
//    kotlinOptions {
//        languageVersion = "1.4"
//    }
//}
